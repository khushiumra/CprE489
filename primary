#include <stdio.h> 
#include <string.h>    
#include <sys/socket.h>    
#include <stdlib.h>
#include "ccitt16.h"
#include "utilities.h"
#include "introduceerror.h"

#define MAX(a,b) (((a) > (b))? (a) : (b))

void primary(int sockfd, double ber) { 

	int read_size;
	char msg[100], srv_reply[150];
	unsigned char packet[PACKET_SIZE];

	int current_packet = 0; //To track the current packet of the window frame
	int total_packets = 0; //To track the window frame
	int packet_count = 0; // To count the total number of packets sent

	//Keep communicating with the server

	while(1)
	{
		printf("Enter message: ");

		//To receive the message from the user

		fgets(msg, 100, stdin);

		int msgSize = strlen(msg);

		//To calculate the number of packets needed

		int num_pack = (msgSize + (DATA_LENGTH-1)) / DATA_LENGTH;

		//Here, we need to make sure to adjust the frame based on the number of received packets

		total_packets += current_packet;
		current_packet = 0;

		//Here, we need to continue sending the packets until we have recieved all the packets
		while(current_packet < num_pack)
		{

			int x = 0;

			//To ensure that packets are sent until the end of the frame
			while(x < WINDOW_SIZE && current_packet < num_pack)
			{
				char buffer[DATA_LENGTH+1];

				memset(buffer, '\0', sizeof(buffer)); //To set the memory
				strncpy(buffer, msg + (current_packet * DATA_LENGTH), DATA_LENGTH); //To build the packet
				buildPacket(packet, DATA_PACKET, buffer, total_packets + current_packet); //To print the packet

				printPacket(packet); //To send the packet to the receiver
				IntroduceError(packet, ber);

				if(send(sockfd, packet, PACKET_SIZE, 0) < 0)
				perror("Send Failed!");

				//Here, we will increase the paccket counts

				packet_count++; //For total packets
				x++; //For frame
				current_packet++; //For current packet
			}

			printf("window is complete! \n");
			printf("Packets sent: %d \n \n", x);
			printf("Server response: \n");

			//To store the largest possible sq number

			int max_sqnum = 0;
			int isNAK = 0;

			int d = x;

			//To check for the 3 expected ACK packets
			for(d; d > 0; d--)
			{
				if((read_size = recv(sockfd, srv_reply, PACKET_SIZE, 0)) < 0)
				perror("Recv failed!");

				printPacket(srv_reply);

				switch(srv_reply[0]) 
				
				{
					case ACK_PACKET:
					max_sqnum = MAX(srv_reply[1] - total_packets, max_sqnum);

					case NAK_PACKET:
					isNAK = 1;

					default:
					printf("UNDEFINED PACKET TYPE!")''

				}

			}

			current_packet -= x;

			if(!isNAK)
			{
				current_packet = max_sqnum;
			}

		}

		printf("Average transmission attempts per packet: %f \n", packet_count / 14.0);


	}
	

}
